---
title: "Data Cleaning for Gene Expression"
author: "Athena Xiourouppa"
format: pdf
---

The following document explains the data cleaning procedures performed on the
spreadsheet Karl Berator provided on the 1st of March, 2023, located in 
`raw-data` under `WTF-IISfD data.xlsx`.

# Excel Cleaning
Before importing the spreadsheet into R, we:

* Deleted the figures on pages `GL-CsE` and `GL-bNo`
* Removed the summary statistics on page `GL-CsE`
* Shifted data cells to top-left corner to avoid blank rows when reading into R
* Made cell line and treatment type names consistent
* Removed cell line and treatment type names from spreadsheet and copied separately.

# R Cleaning
We load the necessary packages for creating tibbles, reading in Excel spreadsheets, 
melting tibbles, and creating nicer tables, respectively:
```{r}
pacman::p_load(tidyverse, readxl, reshape2, gt)
```

We read in the spreadsheet `modified-WTF-IISfD data.xlsx` under `data` into R and obtain 
the sheet names:
```{r, results=FALSE}
# Obtain names of sheets
sheet_names <- excel_sheets(here::here("data/modified-WTF-IISfD-data.xlsx"))

# Read in each sheet
wtf_iisfd <- lapply(sheet_names, 
                 function(n) 
                   read_excel(here::here("data/modified-WTF-IISfD-data.xlsx"),
                                        sheet=n))
```

We then redefine these names to be more descriptive and apply them to the list of tibbles:
```{r}
better_names_gene <- c("GL-CsE-WT-P-1", "GL-bNo-WT-P-2",
                  "GL-JZC-WT-A42-1", "GL-fUg-WT-A42-2", 
                  "GL-jEK-C101-P-1", "GL-Hoe-C101-P-2",
                  "GL-Rza-C101-A42-1", "GL-xpo-C101-A42-2")
names(wtf_iisfd) <- better_names_gene
```

The gene line fUg has a missing value, labelled as a -99 in the gene expression column. Firstly, we label it as NA, and then impute with the mean.
```{r}
wtf_iisfd$`GL-fUg-WT-A42-2`$gene_expression[6] <- NA
wtf_iisfd$`GL-fUg-WT-A42-2`$gene_expression[6] <- 
  mean(wtf_iisfd$`GL-fUg-WT-A42-2`$gene_expression,
       na.rm=TRUE)
```

We save the cleaned list of tibbles as a `.csv` file:
```{r}
write.csv(wtf_iisfd, here::here("data","clean-gene-WTF-IISfD-data.csv"))
```

We then take this tibble and melt it based on the concentration value, since the same 
range is tested in each experiment. We remove the redundant `variable` column, and 
relabel the `value` column to replace it, since we only have one response variable.
```{r}
melted_genes <- wtf_iisfd |> 
  melt(id = "conc") |> 
  select(-c(variable)) |> 
  rename(gene_expression = value)
```

We further split `L1` into separate columns and save the labels as new columns, removing 
the `L1` column as it is no longer needed:
```{r}
gene_line <- c()
cell_type <- c()
treatment <- c()
trial_number <- c()

for(i in 1:nrow(melted_genes)){
  split_label <- str_split(melted_genes[i, ]$L1, "-")[[1]]
  gene_line[i] <- split_label[2]
  cell_type[i] <- split_label[3]
  treatment[i] <- split_label[4]
  trial_number[i] <- split_label[5]
}

melted_genes <- melted_genes |> 
  select(-L1) |> 
  mutate(gene_line = gene_line,
         cell_type = cell_type,
         treatment = treatment,
         trial_number = trial_number)
```

Finally, we save this melted tibble as a `.csv` file for future use:
```{r}
write.csv(melted_genes, here::here("data", "melted-gene-WTF-IISfD-data.csv"))
```

# Creating Summary Statistics
We wish to summarise the experiments performed to compare the effect of the two 
treatments on the two different cell types. There are two trials per cell type 
and treatment, so we filter the melted tibble by these values and save them 
separately. Since there are four combinations total, to do this, we create a function:

```{r}
get_mean_sd_ge <- function(cell, treat, data){
  ### 
  # Function that creates a tibble with the mean gene expression at each 
  #   concentration level of treatment
  ## Parameters
  # cell: str
  #   type of cell
  # treat: str
  #   type of treatment
  # data: tibble
  #   melted tibble of all experiments
  ## Return
  # summary_data: tibble
  #   an 11x3 tibble containing the mean and standard deviation of 
  #     gene expression for each concentration
  
  summary_data <- 
    data |> 
    filter(cell_type == cell & treatment == treat) |> 
    group_by(conc) |>
    summarise(mean_ge = mean(gene_expression),
           sd_ge = sd(gene_expression))
  
  return(summary_data)
}
```

We then apply this to the four combinations: Wild Type cell with placebo treatment, 
101 Type cell with placebo treatment, Wild Type cell with Activating Factor 42, 
and 101 Type cell with Activating Factor 42.
```{r}
WT_P <- get_mean_sd_ge("WT", "P", melted_genes)
CT101_P <- get_mean_sd_ge("C101", "P", melted_genes)
WT_A42 <- get_mean_sd_ge("WT", "A42", melted_genes)
CT101_A42 <- get_mean_sd_ge("C101", "A42", melted_genes)
```

To compare treatments for the same cell type, we create four tibbles containing 
the mean and standard deviation for each treatment over all concentration levels 
for a particular cell type, and vice versa for a treatment type:
```{r}
WT_trials <- right_join(WT_P, WT_A42, by="conc", suffix=c(".P", ".A42"))
CT101_trials <- right_join(CT101_P, CT101_A42, by="conc", suffix=c(".P", ".A42"))
P_trials <- right_join(WT_P, CT101_P, by="conc", suffix=c(".WT", ".CT101"))
A42_trials <- right_join(WT_A42, CT101_A42, by="conc", suffix=c(".WT", ".CT101"))
```

We use `gt` to create a summary table for Wild Type cells with appropriate column names 
and rounded gene expression values.
```{r}
WT_trials |> 
  gt() |> 
  cols_label(conc = "Concentration (mg/mL)", 
             mean_ge.P = "Placebo", 
             mean_ge.A42 = "Activating Factor 42",
             sd_ge.P = "Placebo",
             sd_ge.A42 = "Activating Factor 42") |> 
  tab_header(title = md("**Summary of Gene Expression in Wild Type Cells**")) |> 
  fmt_number(columns = c(mean_ge.P, mean_ge.A42, sd_ge.P, sd_ge.A42),
              decimals = 2) |> 
  cols_align("center") |> 
  tab_spanner(columns = c(mean_ge.P, mean_ge.A42),
               label = "Average Gene Expression") |> 
  tab_spanner(columns = c(sd_ge.P, sd_ge.A42),
               label = "Standard Deviation of Gene Expression") |> 
  gtsave(here::here("tabs/2023-03-03-data-cleaning/wt-summary.png"))
```

We also do this for 101 Type cells:
```{r}
CT101_trials |> 
  gt() |> 
  cols_label(conc = "Concentration (mg/mL)", 
             mean_ge.P = "Placebo", 
             mean_ge.A42 = "Activating Factor 42",
             sd_ge.P = "Placebo",
             sd_ge.A42 = "Activating Factor 42") |> 
  tab_header(title = md("**Summary of Gene Expression in 101 Type Cells**")) |> 
  fmt_number(columns = c(mean_ge.P, mean_ge.A42, sd_ge.P, sd_ge.A42),
              decimals = 2) |> 
  cols_align("center") |> 
  tab_spanner(columns = c(mean_ge.P, mean_ge.A42),
               label = "Average Gene Expression") |> 
  tab_spanner(columns = c(sd_ge.P, sd_ge.A42),
               label = "Standard Deviation of Gene Expression") |> 
  gtsave(here::here("tabs/2023-03-03-data-cleaning/wt-summary.png"))
```

# Creating figures
We now plot the summaries as line graphs for each cell line and treatment type. We do this 
by creating a scatter plot of the mean gene expressions and adding a linear line of best fit.
```{r}
WT_trials |> 
  melt(id="conc") |> 
  filter(str_detect(variable, "mean")) |> 
  ggplot(aes(conc, value, col=variable)) +
  geom_point() +
  geom_smooth(method="lm") +
  labs(x = "Concentration (mg/mL)",
       y = "Gene Expression",
       title = "Effect of Activating Factor 42 on Gene Expression in \nWild Type Cells"
       ) +
  harrypotter::scale_color_hp_d("Ravenclaw",
                                labels = c("Placebo", "Activating Factor 42"),
                                name = "Treatment")
ggsave(here::here("figs/2023-03-03-data-cleaning/wt-linegraph.png"))
```

```{r}
CT101_trials |> 
  melt(id="conc") |> 
  filter(str_detect(variable, "mean")) |> 
  ggplot(aes(conc, value, col=variable)) +
  geom_point() +
  geom_smooth(method="lm") +
  labs(x = "Concentration (mg/mL)",
       y = "Gene Expression",
       title = "Effect of Activating Factor 42 on Gene Expression in \n101 Type Cells"
       ) +
  harrypotter::scale_color_hp_d("Ravenclaw",
                                labels = c("Placebo", "Activating Factor 42"),
                                name = "Treatment")
ggsave(here::here("figs/2023-03-03-data-cleaning/101-linegraph.png"))
```

We also display the spread of values for each cell line and treatment combination

```{r}
# Placebo on cells
P_trials |> 
  melt(id="conc") |> 
  filter(str_detect(variable, "mean")) |> 
  ggplot(aes(conc, value, col=variable)) +
  geom_boxplot() +
  labs(x = "Concentration (mg/mL)",
       y = "Gene Expression",
       title = "Spread of Placebo on Gene Expression in Cells"
       ) +
    harrypotter::scale_color_hp_d("Ravenclaw",
                                labels = c("Wild", "101"),
                                name = "Cell Type")
ggsave(here::here("figs/2023-03-03-data-cleaning/placebo-boxplot.png"))
```

```{r}
# A42 on cells
A42_trials |> 
  melt(id="conc") |> 
  filter(str_detect(variable, "mean")) |> 
  ggplot(aes(conc, value, col=variable)) +
  geom_boxplot() +
  labs(x = "Concentration (mg/mL)",
       y = "Gene Expression",
       title = "Spread of Activating Factor 42 on Gene Expression in Cells"
       ) +
  harrypotter::scale_color_hp_d("Gryffindor",
                                labels = c("Wild", "101"),
                                name = "Cell Type")
ggsave(here::here("figs/2023-03-03-data-cleaning/a42-boxplot.png"))
```

```{r}
# Treatment on WT cells
WT_trials |> 
  melt(id="conc") |> 
  filter(str_detect(variable, "mean")) |> 
  ggplot(aes(conc, value, col=variable)) +
  geom_boxplot() +
  labs(x = "Concentration (mg/mL)",
       y = "Gene Expression",
       title = "Spread of Activating Factor 42 on Gene Expression in \nWild Type Cells"
       ) +
  harrypotter::scale_color_hp_d("Ravenclaw",
                                labels = c("Placebo", "Activating Factor 42"),
                                name = "Treatment")
ggsave(here::here("figs/2023-03-03-data-cleaning/wt-boxplot.png"))
```

```{r}
# Treatment on 101 cells
CT101_trials |> 
  melt(id="conc") |> 
  filter(str_detect(variable, "mean")) |> 
  ggplot(aes(conc, value, col=variable)) +
  geom_boxplot() +
  labs(x = "Concentration (mg/mL)",
       y = "Gene Expression",
       title = "Spread of Activating Factor 42 on Gene Expression in \n101-Type Cells"
       ) +
  harrypotter::scale_color_hp_d("Gryffindor",
                                labels = c("Placebo", "Activating Factor 42"),
                                name = "Treatment")
ggsave(here::here("figs/2023-03-03-data-cleaning/101-boxplot.png"))
```